/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: input.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from 'google-protobuf';
export namespace message {
  export class Input extends pb_1.Message {
    #one_of_decls: number[][] = [];

    constructor(
      data?:
        | any[]
        | {
            id?: string;
            timestamp?: number;
          },
    ) {
      super();
      pb_1.Message.initialize(
        this,
        Array.isArray(data) ? data : [],
        0,
        -1,
        [],
        this.#one_of_decls,
      );
      if (!Array.isArray(data) && typeof data == 'object') {
        if ('id' in data && data.id != undefined) {
          this.id = data.id;
        }
        if ('timestamp' in data && data.timestamp != undefined) {
          this.timestamp = data.timestamp;
        }
      }
    }

    get id() {
      return pb_1.Message.getFieldWithDefault(this, 1, '') as string;
    }

    set id(value: string) {
      pb_1.Message.setField(this, 1, value);
    }

    get timestamp() {
      return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }

    set timestamp(value: number) {
      pb_1.Message.setField(this, 2, value);
    }

    static fromObject(data: { id?: string; timestamp?: number }): Input {
      const message = new Input({});
      if (data.id != null) {
        message.id = data.id;
      }
      if (data.timestamp != null) {
        message.timestamp = data.timestamp;
      }
      return message;
    }

    toObject() {
      const data: {
        id?: string;
        timestamp?: number;
      } = {};
      if (this.id != null) {
        data.id = this.id;
      }
      if (this.timestamp != null) {
        data.timestamp = this.timestamp;
      }
      return data;
    }

    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.id.length) writer.writeString(1, this.id);
      if (this.timestamp != 0) writer.writeInt64(2, this.timestamp);
      if (!w) return writer.getResultBuffer();
    }

    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Input {
      const reader =
          bytes instanceof pb_1.BinaryReader
            ? bytes
            : new pb_1.BinaryReader(bytes),
        message = new Input();
      while (reader.nextField()) {
        if (reader.isEndGroup()) break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.id = reader.readString();
            break;
          case 2:
            message.timestamp = reader.readInt64();
            break;
          default:
            reader.skipField();
        }
      }
      return message;
    }

    serializeBinary(): Uint8Array {
      return this.serialize();
    }

    static deserializeBinary(bytes: Uint8Array): Input {
      return Input.deserialize(bytes);
    }
  }
}
